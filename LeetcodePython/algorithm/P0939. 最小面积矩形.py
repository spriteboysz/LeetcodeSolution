#! /usr/bin/env python
# coding=utf-8
"""
Author: Deean
Date: 2025-04-16 22:08
FileName: algorithm/P0939. 最小面积矩形.py
Description: 
"""
import math
from typing import List

from icecream import ic


class Solution:
    def minAreaRect(self, points: List[List[int]]) -> int:
        minimum = math.inf
        seen = {tuple(point) for point in points}
        points = list(seen)
        for i, point1 in enumerate(points):
            for point2 in points[:i]:
                x1, y1 = point1
                x2, y2 = point2
                if x1 == x2 or y1 == y2:
                    continue
                if (x1, y2) in seen and (x2, y1) in seen:
                    minimum = min(minimum, abs(x2 - x1) * abs(y2 - y1))
        return minimum if minimum != math.inf else 0


if __name__ == '__main__':
    solution = Solution().minAreaRect(
        [[15088, 28838], [34731, 3459], [39142, 3459], [39341, 3324], [32262, 34050], [37539, 3324], [34731, 28687],
         [39142, 28687], [39142, 644], [4845, 36217], [34731, 34050], [4845, 28687], [37539, 2844], [21270, 2844],
         [11219, 644], [32262, 644], [25511, 28687], [37539, 2646], [37539, 2580], [10074, 2844], [2129, 2580],
         [39341, 28838], [2129, 2646], [37539, 3623], [2129, 2844], [15447, 4444], [4845, 644], [15447, 34050],
         [39142, 36217], [15447, 39373], [34731, 28838], [11219, 2844], [2129, 3324], [39142, 28838], [11219, 34050],
         [21270, 3324], [29722, 39373], [37539, 39373], [11219, 2580], [25511, 38799], [4845, 2646], [39142, 3623],
         [4845, 39373], [2129, 3623], [32262, 3324], [4845, 38799], [32262, 4444], [25511, 3324], [25511, 2646],
         [25511, 2580], [2129, 28838], [39341, 3459], [21270, 28687], [25511, 3623], [10074, 34050], [29722, 644],
         [25511, 2844], [21270, 644], [39341, 28687], [10074, 3459], [2129, 36217], [15088, 36217], [29722, 2844],
         [34731, 2646], [25511, 36217], [15088, 38799], [32262, 3623], [15088, 39373], [15088, 3623], [37539, 38799],
         [4845, 34050], [39341, 644], [15088, 4444], [39341, 4444], [10074, 28838], [25511, 34050], [11219, 4444],
         [21270, 39373], [25511, 39373], [15088, 3324], [39142, 2646], [10074, 39373], [25511, 3459], [2129, 28687],
         [34731, 3623], [32262, 28838], [39341, 36217], [39341, 38799], [15088, 34050], [2129, 34050], [4845, 3623],
         [15447, 28687], [2129, 38799], [15447, 3324], [15447, 2646], [29722, 34050], [15447, 2580], [39142, 39373],
         [25511, 4444], [2129, 644], [34731, 39373], [37539, 28687], [21270, 34050], [2129, 4444], [15447, 2844],
         [29722, 3459], [39341, 2844], [32262, 39373], [37539, 3459], [39142, 3324], [34731, 3324], [39142, 2580],
         [39341, 2580], [15447, 36217], [37539, 34050], [39341, 34050], [39341, 39373], [10074, 2646], [34731, 4444],
         [10074, 36217], [15088, 2844], [4845, 4444], [15447, 3623]])
    ic(solution)
